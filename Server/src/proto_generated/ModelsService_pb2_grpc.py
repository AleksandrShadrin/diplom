# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto_generated import ModelsService_pb2 as ModelsService__pb2


class ModelsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetModelPrediction = channel.unary_unary(
            '/prediction.ModelsService/GetModelPrediction',
            request_serializer=ModelsService__pb2.ModelPredictionRequest.
            SerializeToString,
            response_deserializer=ModelsService__pb2.ModelPredictionResponse.
            FromString,
        )
        self.GetModelPredictions = channel.stream_stream(
            '/prediction.ModelsService/GetModelPredictions',
            request_serializer=ModelsService__pb2.ModelPredictionRequest.
            SerializeToString,
            response_deserializer=ModelsService__pb2.ModelPredictionResponse.
            FromString,
        )


class ModelsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetModelPrediction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelPredictions(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetModelPrediction':
        grpc.unary_unary_rpc_method_handler(
            servicer.GetModelPrediction,
            request_deserializer=ModelsService__pb2.ModelPredictionRequest.
            FromString,
            response_serializer=ModelsService__pb2.ModelPredictionResponse.
            SerializeToString,
        ),
        'GetModelPredictions':
        grpc.stream_stream_rpc_method_handler(
            servicer.GetModelPredictions,
            request_deserializer=ModelsService__pb2.ModelPredictionRequest.
            FromString,
            response_serializer=ModelsService__pb2.ModelPredictionResponse.
            SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'prediction.ModelsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler, ))


# This class is part of an EXPERIMENTAL API.
class ModelsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetModelPrediction(request,
                           target,
                           options=(),
                           channel_credentials=None,
                           call_credentials=None,
                           insecure=False,
                           compression=None,
                           wait_for_ready=None,
                           timeout=None,
                           metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/prediction.ModelsService/GetModelPrediction',
            ModelsService__pb2.ModelPredictionRequest.SerializeToString,
            ModelsService__pb2.ModelPredictionResponse.FromString, options,
            channel_credentials, insecure, call_credentials, compression,
            wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModelPredictions(request_iterator,
                            target,
                            options=(),
                            channel_credentials=None,
                            call_credentials=None,
                            insecure=False,
                            compression=None,
                            wait_for_ready=None,
                            timeout=None,
                            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator, target,
            '/prediction.ModelsService/GetModelPredictions',
            ModelsService__pb2.ModelPredictionRequest.SerializeToString,
            ModelsService__pb2.ModelPredictionResponse.FromString, options,
            channel_credentials, insecure, call_credentials, compression,
            wait_for_ready, timeout, metadata)
