@using PSASH.Presentation.Models;
@using PSASH.Presentation.Services;
@using Plotly.Blazor;
@using Plotly.Blazor.LayoutLib;
@using Plotly.Blazor.Traces;

@inject ITimeSeriesTransformer TimeSeriesTransformer
@inject ContextMenuService contextMenuService

<div class="overflow-scroll" style="min-height:400px;" @oncontextmenu=ShowContextMenu @oncontextmenu:preventDefault="true">
    @if (sourceWithSmooth.Count > 0)
    {
        @if(TransformType is TransformationType.FFT)
        {
            <Plotly.Blazor.PlotlyChart @bind-Data="fftData" @bind-Config="config" @ref="chart" />
        }
        else 
        {
            <Plotly.Blazor.PlotlyChart @bind-Data="sourceWithSmooth" @bind-Config="config" @ref="chart" />
        }
    }
    else
    {
        <div class="h-100 d-flex justify-content-center align-items-center">
            <div class="spinner-border" role="status">
            </div>
        </div>
    }
</div>
@code {
    [Parameter]
    public TimeSeriesDto TimeSeriesDto
    {
        get => timeSeriesDto;
        set
        {
            timeSeriesDto = value;

            var sourceValues = timeSeriesDto
            .Values
            .Select((y, idx) => new Point(idx, y))
            .ToArray();

            sourceWithSmooth.Clear();
            sourceWithSmooth.Add(new Scatter
                {
                    Name = "Исходные данные",
                    Mode = Plotly.Blazor.Traces.ScatterLib.ModeFlag.Lines,
                    Y = sourceValues.Select(x => (object)x.Y).ToList(),
                    X = sourceValues.Select(x => (object)x.X).ToList(),
                });

            InvokeAsync(UpdateValues);
        }
    }

    [Parameter]
    public EventCallback<TimeSeriesDto> TimeSeriesDtoChanged { get; set; }

    [Parameter]
    public TransformationType TransformType
    {
        get => transformType;
        set
        {
            transformType = value;
            InvokeAsync(UpdateValues);
        }
    }

    private Layout layout = new() 
    { 
        Width = 800,
        Height = 600,
    };
    private Config config = new()
    {
        Responsive = true,
        DisplayModeBar = Plotly.Blazor.ConfigLib.DisplayModeBarEnum.True
    };

    private IList<ITrace> sourceWithSmooth = new List<ITrace>();
    private IList<ITrace> fftData = new List<ITrace>();

    PlotlyChart chart;

    private TransformationType transformType = TransformationType.AVERAGE_MOVING;

    private int k = 3;
    private TimeSeriesDto timeSeriesDto = default;

    private string RoundValue(object value)
    {
        var res = (double)value;

        return Double.Round(res, 8).ToString();
    }

    private async Task UpdateValues()
    {
        var values = GetValues().ToArray();

        var updatedTs = new Scatter
                {
                    Name = "Сглаженные данные",
                    Mode = Plotly.Blazor.Traces.ScatterLib.ModeFlag.Lines,
                    Y = values.Select(x => (object)x.Y).ToList(),
                    X = values.Select(x => (object)x.X).ToList(),
                };

        if (TransformType is TransformationType.FFT)
        {
            fftData.Clear();
            updatedTs.Name = "Преобразованные данные";
            fftData.Add(updatedTs);
        }
        else
        {
            if (sourceWithSmooth.Count > 1)
                sourceWithSmooth[1] = updatedTs;
            else
                sourceWithSmooth.Add(updatedTs);
        }

        await chart.Update();
    }

    private IEnumerable<Point> GetValues()
    {
        if (TimeSeriesDto is not null)
        {
            return TransformValues(TimeSeriesDto.Values)
            .Select((y, idx) => new Point(idx, y));
        }

        return Enumerable.Empty<Point>();
    }

    private List<double> TransformValues(List<double> values)
    => TransformType switch
    {
        TransformationType.FFT => TimeSeriesTransformer
            .FastFourierTransform(values)
            .ToList(),
        TransformationType.AVERAGE_MOVING => TimeSeriesTransformer
            .AverageMoving(values, k)
            .ToList(),
        _ => values
    };

    private void ShowContextMenu(MouseEventArgs args)
    {
        contextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnContextMenuClick">
        <RadzenMenuItem Value=TransformationType.AVERAGE_MOVING Text="Скользящая средняя">
            <div class="row px-4 justify-content-end align-content-center">
                <RadzenIcon @onclick=OnKSelect Icon="done" class="ms-2 me-auto align-self-center" Style="cursor:pointer;"></RadzenIcon>
                <RadzenNumeric class="w-75" Min="1" Max="100" @bind-Value="k"></RadzenNumeric>
            </div>
        </RadzenMenuItem>
        <RadzenMenuItem Text="Преобразование Фурье" Value="TransformationType.FFT">
        </RadzenMenuItem>
        </RadzenMenu>
    );
    }

    private void OnKSelect(MouseEventArgs args)
    {
        TransformType = TransformationType.AVERAGE_MOVING;
        contextMenuService.Close();
    }

    private void OnContextMenuClick(MenuItemEventArgs args)
    {
        var type = (TransformationType)args.Value;

        if (type == TransformationType.FFT)
        {
            TransformType = type;
            contextMenuService.Close();
        }
    }

    private record struct Point(double X, double Y);

    public enum TransformationType
    {
        FFT,
        AVERAGE_MOVING,
        SPLINE
    }
}
