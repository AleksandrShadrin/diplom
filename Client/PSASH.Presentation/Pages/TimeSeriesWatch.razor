@page "/timeseries/{tsClass}/{tsId}"

@using PSASH.Core.ValueObjects;
@using PSASH.Infrastructure.Exceptions;
@using PSASH.Presentation.Exceptions;
@using PSASH.Presentation.Models;
@inject IFileBasedMonoDatasetService filebasedMonoDatasetService
@inject NotificationService NotificationService
@inject NavigationManager NavManager

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="2" JustifyContent="JustifyContent.Center">
    <RadzenCard class="w-100 bg-primary bg-opacity-75">
        <RadzenText Text="Анализ временного ряда" TextStyle="TextStyle.DisplayH4" class="text-white" />
    </RadzenCard>
</RadzenStack>

@if (timeSeriesDto is not null)
{
    <RadzenRow Gap="1rem" class="mt-4 container-fluid" Style="min-height:400px;" >
        <RadzenColumn class="card bg-white p-4" Size="12" SizeLG="8">
            <PSASH.Presentation.Components.TimeSeriesPlot @bind-TimeSeriesDto="timeSeriesDto" />
        </RadzenColumn>
        <RadzenColumn class="card bg-light p-4" Size="12" SizeLG="4">
            <PSASH.Presentation.Components.TimeSeriesDtoStats TimeSeriesDto="timeSeriesDto" />
        </RadzenColumn>
    </RadzenRow>
}
else
{
    <RadzenRow Gap="1rem" class="mt-4" Style="min-height:400px;">
        <RadzenColumn class="card bg-white p-4" Size="8">
            <div class="spinner-border" role="status">
            </div>
        </RadzenColumn>
        <RadzenColumn class="card bg-light p-4 text-dark" Size="4">
            <div class="spinner-border" role="status">
            </div>
        </RadzenColumn>
    </RadzenRow>
}

@code {
    [Parameter]
    public string TsClass { get; set; } = String.Empty;
    [Parameter]
    public string TsId { get; set; } = String.Empty;

    private TimeSeriesName tsName = default;

    private TimeSeriesDto timeSeriesDto = default;


    protected override async Task OnInitializedAsync()
    {
        await Update();

        if (timeSeriesDto is null)
            NavManager.NavigateTo("");

        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await Update();

        if (timeSeriesDto is null)
            NavManager.NavigateTo("");
    }

    public async Task Update()
    {
        try
        {
            timeSeriesDto = default;

            await Task.Delay(50);

            tsName = TimeSeriesName.FromRouteString($"{TsClass}/{TsId}");

            timeSeriesDto = filebasedMonoDatasetService
                .LoadTimeSeries(tsName.ToTimeSeriesInfo());

            if (timeSeriesDto.Values.Count == 0)
                timeSeriesDto = timeSeriesDto with { Values = new() { 0 } };
        }
        catch (InfrastructureException ex)
        {
            var notification = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Something went wrong",
                    Detail = ex.Message,
                    Duration = 4000
                };
            NotificationService.Notify(notification);
        }
        catch (PresentationException ex)
        {
            var notification = new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Something went wrong",
                    Detail = ex.Message,
                    Duration = 4000
                };

            NotificationService.Notify(notification);
        }
    }
}
